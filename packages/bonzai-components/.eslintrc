---
  extends:
    - "eslint:recommended"
  env:
    browser: true
    node: true
  globals:
    Promise: false
  parser: babel-eslint
  parserOptions:
    ecmaVersion: 6
    sourceType: "module"
    ecmaFeatures:
        arrowFunctions: true
        blockBindings: true
        classes: false
        defaultParams: false
        destructuring: false
        forOf: false
        generators: false
        modules: true
        objectLiteralComputedProperties: false
        objectLiteralDuplicateProperties: false
        objectLiteralShorthandProperties: true
        objectLiteralShorthandMethods: true
        spread: true
        experimentalObjectRestSpread: true
        superInFunctions: false
        templateStrings: true
        jsx: false

  rules:
    ##### Possible Errors #####
    comma-dangle:              # disallow trailing commas in object literals
        - 2
        - "never"
    no-cond-assign: 2          # disallow assignment in conditional expressions
    no-console: 1              # disallow use of console (off by default in the node environment)
    no-constant-condition: 2   # disallow use of constant expressions in conditions
    no-control-regex: 0        # disallow control characters in regular expressions
    no-debugger: 2             # disallow use of debugger
    no-dupe-keys: 2            # disallow duplicate keys when creating object literals
    no-empty: 2                # disallow empty statements
    no-empty-class: 0          # disallow the use of empty character classes in regular expressions
    no-ex-assign: 0            # disallow assigning to the exception in a catch block
    no-extra-boolean-cast: 2   # disallow double-negation boolean casts in a boolean context
    no-extra-semi: 2           # disallow unnecessary semicolons
    no-func-assign: 2          # disallow overwriting functions written as function declarations
    no-inner-declarations:     # disallow function or variable declarations in nested blocks
        - 2
        - functions
    no-invalid-regexp: 2       # disallow invalid regular expression strings in the RegExp constructor
    no-irregular-whitespace: 2 # disallow irregular whitespace outside of strings and comments
    no-negated-in-lhs: 1       # disallow negation of the left operand of an in expression
    no-obj-calls: 2            # disallow the use of object properties of the global object (Math and JSON) as functions
    no-regex-spaces: 1         # disallow multiple spaces in a regular expression literal
    quote-props: 0             # disallow reserved words being used as object literal keys (off by default)
    no-sparse-arrays: 2        # disallow sparse arrays
    no-unreachable: 2          # disallow unreachable statements after a return throw continue or break statement
    use-isnan: 2               # disallow comparisons with the value NaN
    valid-jsdoc: 0             # Ensure JSDoc comments are valid (off by default)
    valid-typeof: 2            # Ensure that the results of typeof are compared against a valid string
    no-unsafe-finally: 1


    ##### Best Practices #####

    block-scoped-var: 0      # treat var statements as if they were block scoped (off by default)
    complexity: 0            # specify the maximum cyclomatic complexity allowed in a program (off by default)
    consistent-return: 0     # require return statements to either always or never specify values
    curly:                   # specify curly brace conventions for all control statements
        - 2
        - "multi-line"
    default-case: 1          # require default case in switch statements (off by default)
    dot-notation: 1          # encourages use of dot notation whenever possible
    eqeqeq:                  # require the use of === and !==
        - 2
        - "always"
        - "null": "ignore"
    guard-for-in: 2          # make sure for-in loops have an if statement (off by default)
    no-param-reassign: 1     # disallow reassignment of function parameters
    no-alert: 1              # disallow the use of alert confirm and prompt
    no-caller: 2             # disallow use of arguments.caller or arguments.callee
    no-div-regex: 0          # disallow division operators explicitly at beginning of regular expression (off by default)
    no-else-return: 2        # disallow else after a return in an if (off by default)
    no-eq-null: 0            # disallow comparisons to null without a type-checking operator (off by default)
    no-eval: 2               # disallow use of eval()
    no-extend-native: 0      # disallow adding to native types
    no-extra-bind: 2         # disallow unnecessary function binding
    no-fallthrough: 2        # disallow fallthrough of case statements
    no-floating-decimal: 2   # disallow the use of leading or trailing decimal points in numeric literals (off by default)
    no-implied-eval: 2       # disallow use of eval()-like methods
    no-iterator: 2           # disallow usage of __iterator__ property
    no-labels: 2             # disallow use of labeled statements
    no-lone-blocks: 2        # disallow unnecessary nested blocks
    no-loop-func: 1          # disallow creation of functions within loops
    no-mixed-operators:
        - 0                  # TODO Conflicts with prettier, have to find a solution
        - groups: [
            ["+", "-", "*", "/", "%", "**"],
            ["==", "!=", "===", "!==", ">", ">=", "<", "<="],
            ["&&", "||"],
            ["in", "instanceof"]
          ]
          allowSamePrecedence: true
    no-multi-spaces: 2       # disallow use of multiple spaces
    no-multi-str: 1          # disallow use of multiline strings
    no-native-reassign: 1    # disallow reassignments of native objects
    no-new: 1                # disallow use of new operator when not part of the assignment or comparison
    no-new-func: 1           # disallow use of new operator for Function object
    no-new-wrappers: 2       # disallows creating new instances of String Number and Boolean
    no-octal: 0              # disallow use of octal literals
    no-octal-escape: 0       # disallow use of octal escape sequences in string literals such as var foo = Copyright \251;
    no-process-env: 0        # disallow use of process.env (off by default)
    no-proto: 2              # disallow usage of __proto__ property
    no-redeclare: 2          # disallow declaring the same variable more than once
    no-return-assign: 2      # disallow use of assignment in return statement
    no-script-url: 0         # disallow use of javascript: urls.
    no-self-compare: 2       # disallow comparisons where both sides are exactly the same (off by default)
    no-sequences: 0          # disallow use of comma operator
    no-unused-expressions:   # disallow usage of expressions in statement position
        - 2
        - allowTernary: true
          allowShortCircuit: true
    no-void: 2               # disallow use of void operator (off by default)
    no-warning-comments: 0   # disallow usage of configurable warning terms in comments e.g. TODO or FIXME (off by default)
    no-with: 2               # disallow use of the with statement
    radix: 0                 # require use of the second argument for parseInt() (off by default)
    vars-on-top: 0           # requires to declare all vars on top of their containing scope (off by default)
    wrap-iife: 0             # require immediate function invocation to be wrapped in parentheses (off by default)
    yoda: 2                  # require or disallow Yoda conditions
    no-unneeded-ternary: "error"


    ##### Strict Mode #####

    global-strict: 0   # (deprecated) require or disallow the use strict pragma in the global scope (off by default in the node environment)
    no-extra-strict: 0 # (deprecated) disallow unnecessary use of use strict; when already in strict mode
    strict: 0          # controls location of Use Strict Directives


    ##### Variables #####

    no-catch-shadow: 0             # disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    no-delete-var: 0               # disallow deletion of variables
    no-label-var: 0                # disallow labels that share a name with a variable
    no-shadow: 1                   # disallow declaration of variables already declared in the outer scope
    no-shadow-restricted-names: 0  # disallow shadowing of names such as arguments
    no-undef: 2                    # disallow use of undeclared variables unless mentioned in a /*global */ block
    no-undef-init: 0               # disallow use of undefined when initializing variables
    no-undefined: 0                # disallow use of undefined variable (off by default)
    no-unused-vars:                # disallow declaration of variables that are not used in the code
        - 1
        - vars: "all"
          args: "none"
    no-use-before-define:          # disallow use of variables before they are defined
        - 1
        - functions: false
          classes: true

    ##### Node.js #####

    handle-callback-err: 0   # enforces error handling in callbacks (off by default) (on by default in the node environment)
    no-mixed-requires: 0     # disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    no-new-require: 0        # disallow use of new operator with the require function (off by default) (on by default in the node environment)
    no-path-concat: 0        # disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    no-process-exit: 0       # disallow process.exit() (on by default in the node environment)
    no-restricted-modules: 0 # restrict usage of specified node modules (off by default)
    no-sync: 0               # disallow use of synchronous methods (off by default)

    ##### Stylistic Issues #####

    indent:
        - "error"
        - 4
        - SwitchCase: 1
    brace-style: 2               # enforce one true brace style (off by default)
    camelcase: 0                 # require camel case names
    comma-spacing: 2             # enforce spacing before and after comma
    comma-style:
        - 2
        - "last"                 # enforce one true comma style (off by default)
    consistent-this:             # enforces consistent naming when capturing the current execution context (off by default)
        - 2
        - "that"
    eol-last: 2                  # enforce newline at the end of file with no multiple empty lines
    func-call-spacing:           # require or disallow spacing between function identifiers and their invocations
        - 2
        - "never"
    func-names: 0                # require function expressions to have a name (off by default)
    func-style: 0                # enforces use of function declarations or expressions (off by default)
    key-spacing:                 # enforces spacing between keys and values in object literal properties
        - 2
        - beforeColon: false
          afterColon: true
    linebreak-style: 2
    max-nested-callbacks:        # specify the maximum depth callbacks can be nested (off by default)
        - 1
        - max: 5
    new-cap:                     # require a capital letter for constructors
        - 2
        - newIsCap: true
          capIsNew: false
    new-parens: 0                # disallow the omission of parentheses when invoking a constructor with no arguments
    no-array-constructor: 0      # disallow use of the Array constructor
    no-inline-comments: 0        # disallow comments inline after code (off by default)
    no-lonely-if: 2              # disallow if as the only statement in an else block (off by default)
    no-mixed-spaces-and-tabs: 2  # disallow mixed spaces and tabs for indentation
    no-multiple-empty-lines: 2   # disallow multiple empty lines (off by default)
    no-nested-ternary: 0         # disallow nested ternary expressions (off by default)
    no-new-object: 0             # disallow use of the Object constructor
    semi-spacing: 2              # disallow space before semicolon
    no-spaced-func: 2            # disallow space between function identifier and application
    no-ternary: 0                # disallow the use of ternary operators (off by default)
    no-trailing-spaces: 2        # disallow trailing whitespace at the end of lines
    no-underscore-dangle: 0      # disallow dangling underscores in identifiers
    no-extra-parens:             # disallow wrapping of non-IIFE statements in parens
        - 2
        - "functions"
    one-var: 0                   # allow just one var statement per function (off by default)
    operator-assignment: 0       # require assignment operator shorthand where possible or prohibit it entirely (off by default)
    padded-blocks:               # enforce padding within blocks (off by default)
        - 2
        - "never"
    quotes:                      # specify whether double or single quotes should be used
        - 2
        - "double"
    semi: 2                      # require or disallow use of semicolons instead of ASI
    sort-vars: 0                 # sort variables within the same declaration block (off by default)
    space-before-function-paren: # require a space after function names (off by default)
        - 2
        - named: "never"
          anonymous: "always"
    keyword-spacing: 2           # require a space after certain keywords (off by default)
    space-before-blocks: 2       # require or disallow space before blocks (off by default)
    object-curly-spacing:        # require or disallow spaces inside brackets (off by default)
        - 2
        - "always"
    array-bracket-spacing:       # require or disallow spaces inside brackets (off by default)
        - 2
        - "never"
    space-in-parens:             # require or disallow spaces inside parentheses (off by default)
        - 2
        - "never"
    space-infix-ops: 2           # require spaces around operators
    space-return-throw-case: 0   # require a space after return throw and case
    space-unary-ops: 0           # Require or disallow spaces before/after unary operators (words on by default nonwords off by default)
    spaced-line-comment: 0       # require or disallow a space immediately following the # in a line comment (off by default)
    wrap-regex: 0                # require regex literals to be wrapped in parentheses (off by default)

    ##### Legacy #####

    max-depth: 0                 # specify the maximum depth that blocks can be nested (off by default)
    max-len:                     # specify the maximum length of a line in your program (off by default)
        - 1
        - 90
        - 4
        - ignoreComments: true
          ignoreTrailingComments: true
          ignoreUrls: true
          ignoreStrings: true
          ignoreTemplateLiterals: true
    max-params: 0                # limits the number of parameters that can be used in the function declaration. (off by default)
    max-statements: 0            # specify the maximum number of statement allowed in a function (off by default)
    no-bitwise: 0                # disallow use of bitwise operators (off by default)
    no-plusplus: 0               # disallow use of unary operators ++ and -- (off by default)
