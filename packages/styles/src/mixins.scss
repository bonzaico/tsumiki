$custom-property-prefix: 'bz' !default;

@mixin custom-property($name, $value, $prefix: $custom-property-prefix) {
    @if type-of($value) == map {
        @each $property, $property-value in $value {
            // Only support one-level of depth for values that are maps. This is to
            // avoid bringing properties like `breakpoints` on type tokens
            @if type-of($property-value) != map {
                @include custom-property('#{$name}-#{$property}', $property-value);
            }
        }
    } @else {
        --#{$prefix}-#{$name}: #{$value};
    }
}

@function should-emit($theme-a, $theme-b, $token, $emit-difference) {
    @if $emit-difference == false {
        @return true;
    }
    @return map-get($theme-a, $token) != map-get($theme-b, $token);
}

@mixin carbon--theme(
  $theme: $carbon--theme,
  $emit-custom-properties: true,
  $emit-difference: true
) {
  $interactive-01: map-get($theme, 'interactive-01') !global;

    @if global-variable-exists('feature-flags') and map-get($feature-flags, 'enable-css-custom-properties') {
        $interactive-01: var(
            --#{$custom-property-prefix}-interactive-01,
            map-get($theme, 'interactive-01')
        ) !global;
    }

    @if $emit-custom-properties == true {
        @if should-emit($theme, $carbon--theme, 'interactive-01', $emit-difference)
        {
            @include custom-property(
                'interactive-01',
                map-get($theme, 'interactive-01')
            );
        }
    }
}
